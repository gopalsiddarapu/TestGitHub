Git Commands
-------------
git help --> It provides frequently used several git commands

git help <cmd-name>---It opens documentation of that particular command 
git init -----> It is used to create empty repository or re-initialize existing repo 
git status ---> This command will display status of current repository 


Staged Files 
=============
Files which are added and they are ready to commit 
these file names will be displayed in green color 


Un-Staged Files 
================
Modified files will be displayed here ,we need to stage these files to commit 
These file names will be displayed in red color 

Un-Tracked Files 
-----------------

Newly created files, we need to stage them to commit 

These file names also will be displayed in red color 



git add : This command is used to add file to staging area 
syntax : git add <Filename>

syntax: git add --a  ===> To add all files at a time .


To Unstage already staged file below command to be used
syntax :
git rm --cached <file-name>

git rm --cached Test.java 
git rm --cached * ====> to unstage all files at a time 

git rm : This command is used to un-stage newly created files
To commit 
-----------
git commit -m 'Initial commit' 

git commit : This command is used to commit our changes to git local repository 

syntax: git commit -m 'commit-msg' 
Note: when we execute commit command it will consider all the files which are in our staging area 

Note: Git local repository will be available in our machine only .

----To commit our files to remote repository we should execute below commands 
1.git remote add <repo-url> ( this requires only first time)
2.git push -u origin master ( this is used to move changes from local to central ) 


----------------------------------------------------------------------------------------------
first time -- git remote add origin <repo-url> (https://github.com/gopalsiddarapu/TestGitHub)

git push -u origin master 



gopal@Gopalakrishna_S MINGW64 /c/Java-Programming/Java-Practice/src (master)
$ git push -f origin master
error: src refspec master does not match any
error: failed to push some refs to 'https://github.com/gopalsiddarapu/TestGitHub'


-------------------------------------------------------------------------------------------

rm and reset diff --- > if the file is already in repository then to unstage it then we will use reset 

rm -- it is used to unstage or untrack file when it was not in repository(central) 


git reset HEAD Test.java 

git reset : it is used to unstage file .

syntax: git reset HEAD <file-name> 

Note: checkout : it means undo -- if we need to ignore changes of file -if we need to come back to previous changes 


git push -- it is used to publish your local commits 

git checkout --file-name 


new repo created : https://github.com/gopalsiddarapu/01-repo.git


git commands part -2 

------------------------

Note: we should provide reason for commit as a message 

->To publish local commits to central repository we will use push command

->Whenever we commit, git will generate commit-id 
->Commit ID contains 40 alphanumerics characters 
-> from 40 alphanumeric characters it will display first 7 characters to us as a commit id

if we want to see complete commit id then click on it and see .

To check commit history :
------------------------

To check commits history we will use git log command 
syntax : git log 
git log 

--> In commit logs it will display below details 

a)commit-id 
b)author
c)timestamp
d)commit msg 


-->To take existing project from repository to local system we will git clone command

git clone <repo-url>

-->Before making any changes to files in local , it is highly recommended to take latest changes from repository. To take latest changes from repository use git pull command

syntax : git pull 



part-3 
-------------

if we don't want to commit any of specific files to central repo then please specifiy those in gitignore file 

HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**
!**/src/test/**

### STS ### 

.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans 
.sts4-cache

### IntelliJ IDEA ### 

.idea 
*.iws
*.iml
*.ipr 

### NetBeans ### 

/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ### 
.vscode/



-------------------
Normally exercise 

-->Create Repository in GIT Hub Account (Repo URL will be generated)
-->Create Spring Boot Application in STS IDE 
--> Go to workspace folder where Project is created 
--> Inside the project folder open GIT Bash
--->Execute git init command 
--->Execute git add --a command
---> Execute Commit command ( git commit -m '<msg>')
--->Execute  remote add command ( git remote add origin  repo-url ) first time 
-->Execute push command ( git push -u origin master) 


----------------------------------------------------

25th october 2024 

git remote -v  // to show remote repositories ( current remote repos pointing)
git fetch --all ( to list the all remote repo branches)

To detach from one branch to another branch use below command 
git checkout origin/master  or git checkout origin/main  or git checkout -b branchname 

git show HEAD ( it will show the current commit /latest commit of the repository ) 

Issue : allow all unrelated histories  while merging two different branches 

git merge branchname(master)  --allow-unrelated-histories 

git pull --rebase ( to get commits of central repository into current branch in local ) 


git branch --set-upstream-to=origin/master  ( this sets to upstream branch ) after this we don't need to use -u while pushing , we just can use git push only 


---------------

11th november 2024 

git fetch --all
git merge branchname 

git log --oneline 

--reverting already committed changes  for specific commit - id ----

1)git revert commit-id , here one new commit id will be created for reverted changes 

after that git push --run this 

another way to delete commit-id 

2)git reset --hard  commit-id( this commit id we should give to which to be pointed(previous commit-id) ) (some of the situations if revert commands doesn't work )
git push --force

3) reverting single file from the repository 
git restore filename(hello.java)
git push or git push --force 

** ( git push --force is required when  our local commits are behind the remote repository ( it means some of other persons pushed changes before our commits to central or if the local git history is overwritten)
** (git push  only required if local commits are up to date with central commits )



git cherry-pick commit-id ( it works for specific commits instead of merging changes from one branch to another branch entires changes ,only specific commits to be merged in required branch )
git push 

















 

